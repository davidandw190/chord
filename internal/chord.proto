syntax = "proto3";

package internal;

option go_package = "github.com/davidandw190/chord/internal;chord";

// Node contains a node ID and address.
message Node {
    bytes id = 1;
    string addr = 2;
}

message ER {}

message ID {
    bytes id = 1;
}


// Chord is the service for inter-node communication.
// This has all the RPC functions needed to maintain
// a Chord cluster.
service Chord {
    // GetPredecessor returns the node believed to be the current predecessor.
    rpc GetPredecessor(ER) returns (Node) {}
    // GetSuccessor returns the node believed to be the current successor.
    rpc GetSuccessor(ER) returns (Node) {}
    // Notify notifies Chord that Node thinks it is our predecessor. This has
    // the potential to initiate the transferring of keys.
    rpc Notify(Node) returns (ER) {}
    // ClosestPrecedingFinger returns the entry of the finger table that
    // precedes ID but is closest to it.
    rpc ClosestPrecedingFinger(ID) returns (Node);
    // FindSuccessor finds the node the succedes ID. May initiate RPC calls to
    // other nodes.
    rpc FindSuccessor(ID) returns (Node);
}